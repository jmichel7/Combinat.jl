# auto-generated tests from julia-repl docstrings
using Test, Combinat
function mytest(file::String,cmd::String,man::String)
  println(file," ",cmd)
  exec=repr(MIME("text/plain"),eval(Meta.parse(cmd)),context=:limit=>true)
  if endswith(cmd,";") return true end
  exec=replace(exec,r"\s*$"m=>""); exec=replace(exec,r"\s*$"s=>"")
  exec=replace(exec,r"^\s*"=>"")
  if exec==man return true end
  i=findfirst(i->i<=lastindex(man) && exec[i]!=man[i],collect(eachindex(exec)))
  print("exec=$(repr(exec[i:end]))\nmanl=$(repr(man[i:end]))\n")
  false
end
@testset "Combinat.jl" begin
@test mytest("Combinat.jl","groupby(iseven,1:10)","Dict{Bool, Vector{Int64}} with 2 entries:\n  0 => [1, 3, 5, 7, 9]\n  1 => [2, 4, 6, 8, 10]")
@test mytest("Combinat.jl","tally(\"a tally test\")","7-element Vector{Pair{Char, Int64}}:\n ' ' => 2\n 'a' => 2\n 'e' => 1\n 'l' => 2\n 's' => 1\n 't' => 3\n 'y' => 1")
@test mytest("Combinat.jl","l=[:Jan,:Feb,:Mar,:Apr,:May,:Jun,:Jul,:Aug,:Sep,:Oct,:Nov,:Dec];","nothing")
@test mytest("Combinat.jl","collectby(x->first(string(x)),l)","8-element Vector{Vector{Symbol}}:\n [:Apr, :Aug]\n [:Dec]\n [:Feb]\n [:Jan, :Jun, :Jul]\n [:Mar, :May]\n [:Nov]\n [:Oct]\n [:Sep]")
@test mytest("Combinat.jl","collectby(\"JFMAMJJASOND\",l)","8-element Vector{Vector{Symbol}}:\n [:Apr, :Aug]\n [:Dec]\n [:Feb]\n [:Jan, :Jun, :Jul]\n [:Mar, :May]\n [:Nov]\n [:Oct]\n [:Sep]")
@test mytest("Combinat.jl","a=Combinat.Combinations(1:4);","nothing")
@test mytest("Combinat.jl","collect(a)","16-element Vector{Vector{Int64}}:\n []\n [1]\n [2]\n [3]\n [4]\n [1, 2]\n [1, 3]\n [1, 4]\n [2, 3]\n [2, 4]\n [3, 4]\n [1, 2, 3]\n [1, 2, 4]\n [1, 3, 4]\n [2, 3, 4]\n [1, 2, 3, 4]")
@test mytest("Combinat.jl","a=Combinat.Combinations([1,2,2,3,4,4],3)","Combinations([1, 2, 2, 3, 4, 4],3)")
@test mytest("Combinat.jl","collect(a)","10-element Vector{Vector{Int64}}:\n [1, 2, 2]\n [1, 2, 3]\n [1, 2, 4]\n [1, 3, 4]\n [1, 4, 4]\n [2, 2, 3]\n [2, 2, 4]\n [2, 3, 4]\n [2, 4, 4]\n [3, 4, 4]")
@test mytest("Combinat.jl","ncombinations([1,2,2,3])","12")
@test mytest("Combinat.jl","combinations([1,2,2,3])","12-element Vector{Vector{Int64}}:\n []\n [1]\n [2]\n [3]\n [1, 2]\n [1, 3]\n [2, 2]\n [2, 3]\n [1, 2, 2]\n [1, 2, 3]\n [2, 2, 3]\n [1, 2, 2, 3]")
@test mytest("Combinat.jl","narrangements(\"settle\",2)","14")
@test mytest("Combinat.jl","narrangements(\"settle\")","523")
@test mytest("Combinat.jl","String.(arrangements(\"settle\",2))","14-element Vector{String}:\n \"ee\"\n \"el\"\n \"es\"\n \"et\"\n \"le\"\n \"ls\"\n \"lt\"\n \"se\"\n \"sl\"\n \"st\"\n \"te\"\n \"tl\"\n \"ts\"\n \"tt\"")
@test mytest("Combinat.jl","permutations(3)","6-element Vector{Any}:\n [1, 2, 3]\n [1, 3, 2]\n [2, 1, 3]\n [2, 3, 1]\n [3, 1, 2]\n [3, 2, 1]")
@test mytest("Combinat.jl","sum(first(p) for p in Combinat.Permutations(5))","360")
@test mytest("Combinat.jl","a=Combinat.Partitions(5)","Partitions(5)")
@test mytest("Combinat.jl","collect(a)","7-element Vector{Vector{Int64}}:\n [1, 1, 1, 1, 1]\n [2, 1, 1, 1]\n [2, 2, 1]\n [3, 1, 1]\n [3, 2]\n [4, 1]\n [5]")
@test mytest("Combinat.jl","a=Combinat.Partitions(10,3)","Partitions(10,3)")
@test mytest("Combinat.jl","collect(a)","8-element Vector{Vector{Int64}}:\n [4, 3, 3]\n [4, 4, 2]\n [5, 3, 2]\n [5, 4, 1]\n [6, 2, 2]\n [6, 3, 1]\n [7, 2, 1]\n [8, 1, 1]")
@test mytest("Combinat.jl","npartitions(7)","15")
@test mytest("Combinat.jl","partitions(7)","15-element Vector{Vector{Int64}}:\n [1, 1, 1, 1, 1, 1, 1]\n [2, 1, 1, 1, 1, 1]\n [2, 2, 1, 1, 1]\n [2, 2, 2, 1]\n [3, 1, 1, 1, 1]\n [3, 2, 1, 1]\n [3, 2, 2]\n [3, 3, 1]\n [4, 1, 1, 1]\n [4, 2, 1]\n [4, 3]\n [5, 1, 1]\n [5, 2]\n [6, 1]\n [7]")
@test mytest("Combinat.jl","npartitions(7,3)","4")
@test mytest("Combinat.jl","partitions(7,3)","4-element Vector{Vector{Int64}}:\n [3, 2, 2]\n [3, 3, 1]\n [4, 2, 1]\n [5, 1, 1]")
@test mytest("Combinat.jl","npartitions(17,[10,5,2])","3")
@test mytest("Combinat.jl","partitions(17,[10,5,2])","3-element Vector{Vector{Int64}}:\n [5, 2, 2, 2, 2, 2, 2]\n [5, 5, 5, 2]\n [10, 5, 2]")
@test mytest("Combinat.jl","npartitions(17,[10,5,2],3)","1")
@test mytest("Combinat.jl","partitions(17,[10,5,2],3)","1-element Vector{Vector{Int64}}:\n [10, 5, 2]")
@test mytest("Combinat.jl","npartitions(1:3)","5")
@test mytest("Combinat.jl","partitions(1:3)","5-element Vector{Vector{Vector{Int64}}}:\n [[1, 2, 3]]\n [[1, 2], [3]]\n [[1, 3], [2]]\n [[1], [2, 3]]\n [[1], [2], [3]]")
@test mytest("Combinat.jl","npartitions(1:4,2)","7")
@test mytest("Combinat.jl","partitions(1:4,2)","7-element Vector{Vector{Vector{Int64}}}:\n [[1, 2, 3], [4]]\n [[1, 2, 4], [3]]\n [[1, 2], [3, 4]]\n [[1, 3, 4], [2]]\n [[1, 3], [2, 4]]\n [[1, 4], [2, 3]]\n [[1], [2, 3, 4]]")
@test mytest("Combinat.jl","stirling1.(4,0:4)","5-element Vector{Int64}:\n  0\n  6\n 11\n  6\n  1")
@test mytest("Combinat.jl","[stirling1(n,k) for n in 0:6, k in 0:6]","7×7 Matrix{Int64}:\n 1    0    0    0   0   0  0\n 0    1    0    0   0   0  0\n 0    1    1    0   0   0  0\n 0    2    3    1   0   0  0\n 0    6   11    6   1   0  0\n 0   24   50   35  10   1  0\n 0  120  274  225  85  15  1")
@test mytest("Combinat.jl","stirling1(50,big(10))","101623020926367490059043797119309944043405505380503665627365376")
@test mytest("Combinat.jl","stirling2.(4,0:4)","5-element Vector{Int64}:\n 0\n 1\n 7\n 6\n 1")
@test mytest("Combinat.jl","[stirling2(i,j) for i in 0:6, j in 0:6]","7×7 Matrix{Int64}:\n 1  0   0   0   0   0  0\n 0  1   0   0   0   0  0\n 0  1   1   0   0   0  0\n 0  1   3   1   0   0  0\n 0  1   7   6   1   0  0\n 0  1  15  25  10   1  0\n 0  1  31  90  65  15  1")
@test mytest("Combinat.jl","stirling2(50,big(10))","26154716515862881292012777396577993781727011")
@test mytest("Combinat.jl","bell.(0:6)","7-element Vector{Int64}:\n   1\n   1\n   2\n   5\n  15\n  52\n 203")
@test mytest("Combinat.jl","bell(14)","190899322")
@test mytest("Combinat.jl","bell(big(30))","846749014511809332450147")
@test mytest("Combinat.jl","npartition_tuples(3,2)","10")
@test mytest("Combinat.jl","partition_tuples(3,2)","10-element Vector{Vector{Vector{Int64}}}:\n [[1, 1, 1], []]\n [[1, 1], [1]]\n [[1], [1, 1]]\n [[], [1, 1, 1]]\n [[2, 1], []]\n [[1], [2]]\n [[2], [1]]\n [[], [2, 1]]\n [[3], []]\n [[], [3]]")
@test mytest("Combinat.jl","ncompositions(4)","8")
@test mytest("Combinat.jl","compositions(4)","8-element Vector{Vector{Int64}}:\n [4]\n [1, 3]\n [2, 2]\n [3, 1]\n [1, 1, 2]\n [1, 2, 1]\n [2, 1, 1]\n [1, 1, 1, 1]")
@test mytest("Combinat.jl","ncompositions(4,2)","3")
@test mytest("Combinat.jl","compositions(4,2)","3-element Vector{Vector{Int64}}:\n [1, 3]\n [2, 2]\n [3, 1]")
@test mytest("Combinat.jl","ncompositions(4,2;min=0)","5")
@test mytest("Combinat.jl","compositions(4,2;min=0)","5-element Vector{Vector{Int64}}:\n [0, 4]\n [1, 3]\n [2, 2]\n [3, 1]\n [4, 0]")
@test mytest("Combinat.jl","multisets(1:4,3)","20-element Vector{Vector{Int64}}:\n [1, 1, 1]\n [1, 1, 2]\n [1, 1, 3]\n [1, 1, 4]\n [1, 2, 2]\n [1, 2, 3]\n [1, 2, 4]\n [1, 3, 3]\n [1, 3, 4]\n [1, 4, 4]\n [2, 2, 2]\n [2, 2, 3]\n [2, 2, 4]\n [2, 3, 3]\n [2, 3, 4]\n [2, 4, 4]\n [3, 3, 3]\n [3, 3, 4]\n [3, 4, 4]\n [4, 4, 4]")
@test mytest("Combinat.jl","lcm_partitions([[1,2],[3,4],[5,6]],[[1],[2,5],[3],[4],[6]])","2-element Vector{Vector{Int64}}:\n [1, 2, 5, 6]\n [3, 4]")
@test mytest("Combinat.jl","gcd_partitions([[1,2],[3,4],[5,6]],[[1],[2,5],[3],[4],[6]])","6-element Vector{Vector{Int64}}:\n [1]\n [2]\n [3]\n [4]\n [5]\n [6]")
@test mytest("Combinat.jl","catalan(8)","1430")
@test mytest("Combinat.jl","catalan(big(50))","1978261657756160653623774456")
@test mytest("Combinat.jl","m=[0 0 0 1;0 0 1 0;0 1 0 0;1 0 0 0]","4×4 Matrix{Int64}:\n 0  0  0  1\n 0  0  1  0\n 0  1  0  0\n 1  0  0  0")
@test mytest("Combinat.jl","diagblocks(m)","2-element Vector{Vector{Int64}}:\n [1, 4]\n [2, 3]")
@test mytest("Combinat.jl","m[[1,4,2,3],[1,4,2,3]]","4×4 Matrix{Int64}:\n 0  1  0  0\n 1  0  0  0\n 0  0  0  1\n 0  0  1  0")
@test mytest("Combinat.jl","m=[1 0 0 0;0 1 0 0;1 0 1 0;0 0 0 1;0 0 1 0]","5×4 Matrix{Int64}:\n 1  0  0  0\n 0  1  0  0\n 1  0  1  0\n 0  0  0  1\n 0  0  1  0")
@test mytest("Combinat.jl","blocks(m)","3-element Vector{Tuple{Vector{Int64}, Vector{Int64}}}:\n ([1, 3, 5], [1, 3])\n ([2], [2])\n ([4], [4])")
@test mytest("Combinat.jl","m[[1,3,5,2,4],[1,3,2,4]]","5×4 Matrix{Int64}:\n 1  0  0  0\n 1  1  0  0\n 0  1  0  0\n 0  0  1  0\n 0  0  0  1")
@test mytest("Combinat.jl","conjugate_partition([4,2,1])","4-element Vector{Int64}:\n 3\n 2\n 1\n 1")
@test mytest("Combinat.jl","conjugate_partition([6])","6-element Vector{Int64}:\n 1\n 1\n 1\n 1\n 1\n 1")
@test mytest("Combinat.jl","dominates([5,4],[4,4,1])","true")
@test mytest("Combinat.jl","tableaux([[2,1],[1]])","8-element Vector{Vector{Vector{Vector{Int64}}}}:\n [[[1, 2], [3]], [[4]]]\n [[[1, 2], [4]], [[3]]]\n [[[1, 3], [2]], [[4]]]\n [[[1, 3], [4]], [[2]]]\n [[[1, 4], [2]], [[3]]]\n [[[1, 4], [3]], [[2]]]\n [[[2, 3], [4]], [[1]]]\n [[[2, 4], [3]], [[1]]]")
@test mytest("Combinat.jl","tableaux([2,2])","2-element Vector{Vector{Vector{Int64}}}:\n [[1, 2], [3, 4]]\n [[1, 3], [2, 4]]")
@test mytest("Combinat.jl","robinson_schensted([2,3,4,1])","([[1, 3, 4], [2]], [[1, 2, 3], [4]])")
@test mytest("Combinat.jl","[prime_residues(24)]","1-element Vector{Vector{Int64}}:\n [1, 5, 7, 11, 13, 17, 19, 23]")
@test mytest("Combinat.jl","primitiveroot(23)","5")
@test mytest("Combinat.jl","moebius.(1:6)","6-element Vector{Int64}:\n  1\n -1\n -1\n  0\n -1\n  1")
end
